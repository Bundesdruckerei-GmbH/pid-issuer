/*
 * Copyright 2024 Bundesdruckerei GmbH
 * For the license see the accompanying file LICENSE.md
 */
package de.bundesdruckerei.mdoc.kotlin.core.auth

import com.upokecenter.cbor.CBORObject
import de.bundesdruckerei.mdoc.kotlin.core.common.hexToByteArray
import de.bundesdruckerei.mdoc.kotlin.core.common.toHex
import de.bundesdruckerei.mdoc.kotlin.core.uint
import de.bundesdruckerei.mdoc.kotlin.toHexString
import org.junit.Assert.assertEquals
import org.junit.Assert.assertNotNull
import org.junit.Assert.assertTrue
import org.junit.Before
import org.junit.Test

open class IssuerAuthTest {

    //byte string for V04 MSO - Capitalized first letter of some fields
    private val issuerAuthByteString =
        "8443A10126A118215901F3308201EF30820195A00302010202143C4416EED784F3B413E48F56F075ABFA6D87EB84300A06082A8648CE3D04030230233114301206035504030C0B75746F7069612069616361310B3009060355040613025553301E170D3230313030313030303030305A170D3231313030313030303030305A30213112301006035504030C0975746F706961206473310B30090603550406130255533059301306072A8648CE3D020106082A8648CE3D03010703420004ACE7AB7340E5D9648C5A72A9A6F56745C7AAD436A03A43EFEA77B5FA7B88F0197D57D8983E1B37D3A539F4D588365E38CBBF5B94D68C547B5BC8731DCD2F146BA381A83081A5301E0603551D120417301581136578616D706C65406578616D706C652E636F6D301C0603551D1F041530133011A00FA00D820B6578616D706C652E636F6D301D0603551D0E0416041414E29017A6C35621FFC7A686B7B72DB06CD12351301F0603551D2304183016801454FA2383A04C28E0D930792261C80C4881D2C00B300E0603551D0F0101FF04040302078030150603551D250101FF040B3009060728818C5D050102300A06082A8648CE3D040302034800304502210097717AB9016740C8D7BCDAA494A62C053BBDECCE1383C1ACA72AD08DBC04CBB202203BAD859C13A63C6D1AD67D814D43E2425CAF90D422422C04A8EE0304C0D3A68D5903A2D81859039DA66776657273696F6E63312E306F646967657374416C676F726974686D675348412D3235366C76616C756544696765737473A2716F72672E69736F2E31383031332E352E31AD00582075167333B47B6C2BFB86ECCC1F438CF57AF055371AC55E1E359E20F254ADCEBF01582067E539D6139EBD131AEF441B445645DD831B2B375B390CA5EF6279B205ED45710258203394372DDB78053F36D5D869780E61EDA313D44A392092AD8E0527A2FBFE55AE0358202E35AD3C4E514BB67B1A9DB51CE74E4CB9B7146E41AC52DAC9CE86B8613DB555045820EA5C3304BB7C4A8DCB51C4C13B65264F845541341342093CCA786E058FAC2D59055820FAE487F68B7A0E87A749774E56E9E1DC3A8EC7B77E490D21F0E1D3475661AA1D0658207D83E507AE77DB815DE4D803B88555D0511D894C897439F5774056416A1C7533075820F0549A145F1CF75CBEEFFA881D4857DD438D627CF32174B1731C4C38E12CA936085820B68C8AFCB2AAF7C581411D2877DEF155BE2EB121A42BC9BA5B7312377E068F660958200B3587D1DD0C2A07A35BFB120D99A0ABFB5DF56865BB7FA15CC8B56A66DF6E0C0A5820C98A170CF36E11ABB724E98A75A5343DFA2B6ED3DF2ECFBB8EF2EE55DD41C8810B5820B57DD036782F7B14C6A30FAAAAE6CCD5054CE88BDFA51A016BA75EDA1EDEA9480C5820651F8736B18480FE252A03224EA087B5D10CA5485146C67C74AC4EC3112D4C3A746F72672E69736F2E31383031332E352E312E5553A4005820D80B83D25173C484C5640610FF1A31C949C1D934BF4CF7F18D5223B15DD4F21C0158204D80E1E2E4FB246D97895427CE7000BB59BB24C8CD003ECF94BF35BBD2917E340258208B331F3B685BCA372E85351A25C9484AB7AFCDF0D2233105511F778D98C2F544035820C343AF1BD1690715439161ABA73702C474ABF992B20C9FB55C36A336EBE01A876D6465766963654B6579496E666FA1696465766963654B6579A40102200121582096313D6C63E24E3372742BFDB1A33BA2C897DCD68AB8C753E4FBD48DCA6B7F9A2258201FB3269EDD418857DE1B39A4E4A44B92FA484CAA722C228288F01D0C03A2C3D667646F6354797065756F72672E69736F2E31383031332E352E312E6D444C6C76616C6964697479496E666FA3667369676E6564C074323032302D31302D30315431333A33303A30325A6976616C696446726F6DC074323032302D31302D30315431333A33303A30325A6A76616C6964556E74696CC074323032312D31302D30315431333A33303A30325A584059E64205DF1E2F708DD6DB0847AED79FC7C0201D80FA55BADCAF2E1BCF5902E1E5A62E4832044B890AD85AA53F129134775D733754D7CB7A413766AEFF13CB2E"
    private val issuerAuthSignatureHex =
        "59e64205df1e2f708dd6db0847aed79fc7c0201d80fa55badcaf2e1bcf5902e1e5a62e4832044b890ad85aa53f129134775d733754d7cb7a413766aeff13cb2e"


    private lateinit var issuerAuthBytes: ByteArray
    private lateinit var issuerAuth: IssuerAuth

    @Before
    fun setUp() {
        issuerAuthBytes = issuerAuthByteString.hexToByteArray()
        issuerAuth = IssuerAuth.fromCBOR(CBORObject.DecodeFromBytes(issuerAuthBytes))
    }

    @Test
    fun `verify IssuerAuthSignature`() {
        val cbor = CBORObject.DecodeFromBytes(issuerAuthBytes)
        val signature = IssuerAuth.fromCBOR(cbor).signature
        assertNotNull(signature)
        assertTrue(signature.isNotEmpty())
        assertEquals(issuerAuthSignatureHex, signature.toHex())
    }

    @Test
    fun `verify mso`() {
        val msoString = issuerAuthByteString.substring(1026, 2886)
        val mso = MobileSecurityObject.fromTaggedCBOR(
            CBORObject.DecodeFromBytes(
                msoString.hexToByteArray()
            )
        )

        assertEquals(
            mso.deviceKeyInfo.deviceKey.AsPublicKey(),
            issuerAuth.mso.deviceKeyInfo.deviceKey.AsPublicKey()
        )
        assertEquals(mso.docType, issuerAuth.mso.docType)
        assertEquals(mso.digestAlgorithm, issuerAuth.mso.digestAlgorithm)
        assertEquals(mso.validityInfo, issuerAuth.mso.validityInfo)

        listOf<Pair<String, uint>>(
            Pair("org.iso.18013.5.1", 1),
            Pair("org.iso.18013.5.1", 2),
            Pair("org.iso.18013.5.1", 3),
            Pair("org.iso.18013.5.1", 4),
            Pair("org.iso.18013.5.1", 5),
            Pair("org.iso.18013.5.1", 6),
            Pair("org.iso.18013.5.1", 7),
            Pair("org.iso.18013.5.1", 8),
            Pair("org.iso.18013.5.1", 10),
            Pair("org.iso.18013.5.1", 11),
            Pair("org.iso.18013.5.1", 12)
        ).forEach {
            assertEquals(
                mso.valueDigests
                    .digests
                    .getValue(it.first)
                    .getValue(it.second)
                    .toHexString(),
                issuerAuth.mso
                    .valueDigests
                    .digests
                    .getValue(it.first)
                    .getValue(it.second)
                    .toHexString()
            )
        }

    }

    @Test
    fun `verify asCBOR`() {
        assertEquals(issuerAuth.EncodeToCBORObject(), issuerAuth.asCBOR())
    }
}
